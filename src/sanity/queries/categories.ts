import { defineQuery } from "next-sanity";
import type { CATEGORY_BY_SLUG_QUERYResult } from "@/sanity/types/sanity.types";
import { sanityFetch } from "@/sanity/lib/fetch";

/**
 * GROQ query to fetch a category by its slug
 * Returns category information needed for page routing decisions
 *
 * Following Sanity best practices:
 * - Using defineQuery for automatic type inference
 * - Query assigned to globally unique variable
 * - Syntactically valid GROQ with proper structure
 * - Type is automatically generated by Sanity TypeGen
 */
export const CATEGORY_BY_SLUG_QUERY =
  defineQuery(`*[_type == "category" && slug.current == $slug && isActive == true][0] {
  _id,
  title,
  "slug": slug.current,
  pageType
}`);


/**
 * Fetch category by full slug path using enhanced sanityFetch
 * Joins slug array into a single path string for GROQ query
 */
export async function getCategoryBySlugPath(
  slugPath: string[]
): Promise<CATEGORY_BY_SLUG_QUERYResult> {
  const fullSlug = slugPath.join("/");

  const category = await sanityFetch<CATEGORY_BY_SLUG_QUERYResult>({
    query: CATEGORY_BY_SLUG_QUERY,
    params: { slug: fullSlug },
    revalidate: 3600, // Revalidate every hour
    tags: ["category"], // Tag for cache invalidation
  });

  return category;
}
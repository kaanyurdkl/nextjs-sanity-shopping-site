/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type PromoCode = {
  _id: string;
  _type: "promoCode";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description?: string;
  code: string;
  discountType: "fixed_amount" | "percentage";
  discountValue: number;
  hasMaximumDiscount?: boolean;
  maximumDiscount?: number;
  hasMinimumPurchase?: boolean;
  minimumPurchase?: number;
  hasUsageLimit?: boolean;
  usageLimit?: number;
  isActive?: boolean;
  startDate: string;
  endDate?: string;
  usageCount?: number;
};

export type Promotion = {
  _id: string;
  _type: "promotion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description: string;
  type:
    | "percentage"
    | "fixed_amount"
    | "bundle"
    | "bogo"
    | "tiered"
    | "threshold";
  percentageConfig?: {
    discountPercentage?: number;
    minimumQuantity?: number;
    maximumDiscount?: number;
  };
  fixedAmountConfig?: {
    discountAmount?: number;
    minimumPurchase?: number;
  };
  bundleConfig?: {
    quantity?: number;
    bundlePrice?: number;
  };
  bogoConfig?: {
    buyQuantity?: number;
    getQuantity?: number;
    discountType?: "free" | "percentage";
    discountPercentage?: number;
  };
  tieredConfig?: {
    tiers?: Array<{
      minimumQuantity?: number;
      discountPercentage?: number;
      _key: string;
    }>;
  };
  thresholdConfig?: {
    minimumSpend?: number;
    discountType?: "percentage" | "fixed_amount";
    discountValue?: number;
  };
  applicableCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  applicableProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
  showTag?: boolean;
  tagLabel: string;
  tagBackgroundColor: string;
  tagTextColor: string;
  priority: number;
  isActive?: boolean;
  startDate: string;
  endDate?: string;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber: string;
  status:
    | "confirmation"
    | "processing"
    | "shipped"
    | "in_transit"
    | "out_for_delivery"
    | "delivered"
    | "delayed"
    | "cancelled"
    | "refunded";
  userId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  guestEmail?: string;
  items: Array<{
    product: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    variant?: {
      size: string;
      color: string;
      sku: string;
    };
    quantity: number;
    basePrice: number;
    finalPrice: number;
    appliedPromotions?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "promotion";
    }>;
    _type: "orderItem";
    _key: string;
  }>;
  subtotal: number;
  totalDiscount?: number;
  promoCodeDiscount?: number;
  promoCode?: string;
  shippingCost: number;
  taxAmount: number;
  taxRate?: number;
  grandTotal: number;
  shippingAddress: Address;
  billingAddress?: {
    sameAsShipping?: boolean;
    address?: Address;
  };
  paymentMethod: {
    type: "credit_card" | "paypal";
    stripePaymentIntentId?: string;
    lastFourDigits?: string;
    brand?: string;
  };
  shippingMethod: "standard" | "express";
  trackingNumber?: string;
  carrier?: string;
  estimatedDelivery?: string;
  orderNotes?: string;
  statusHistory?: Array<{
    status: string;
    timestamp: string;
    note?: string;
    _key: string;
  }>;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  addresses?: Array<
    {
      _key: string;
    } & Address
  >;
  isActive?: boolean;
  orderEmails?: boolean;
  googleId: string;
};

export type Review = {
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  reviewerName: string;
  rating: number;
  comment: string;
  isVerifiedPurchase?: boolean;
  isApproved?: boolean;
  helpfulCount?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  hoverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  basePrice: number;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  categoryHierarchy?: Array<string>;
  productType: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productType";
  };
  variants: Array<{
    color: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "color";
    };
    size: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "size";
    };
    sku: string;
    stockQuantity: number;
    isActive?: boolean;
    _type: "variant";
    _key: string;
  }>;
  isActive?: boolean;
  isFeatured?: boolean;
  seoTitle?: string;
  seoDescription?: string;
  keyFeatures?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  materials?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  sizeAndFit?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  careInstructions?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  relatedProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
};

export type Size = {
  _id: string;
  _type: "size";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  code: string;
  sizeGroup: "letter" | "waist";
  sortOrder: number;
};

export type ProductType = {
  _id: string;
  _type: "productType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description: string;
  sizeGroup: "letter" | "waist";
};

export type Color = {
  _id: string;
  _type: "color";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  code: string;
  hexCode: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description?: string;
  pageType: "listing" | "landing";
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  enableSizeFilter?: boolean;
  enableColorFilter?: boolean;
  enablePriceFilter?: boolean;
  seoTitle?: string;
  seoDescription?: string;
  isActive?: boolean;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type Address = {
  _type: "address";
  nickname: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  streetAddress: string;
  aptUnit?: string;
  city: string;
  province:
    | "AB"
    | "BC"
    | "MB"
    | "NB"
    | "NL"
    | "NT"
    | "NS"
    | "NU"
    | "ON"
    | "PE"
    | "QC"
    | "SK"
    | "YT";
  postalCode: string;
  country?: string;
  isDefault?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | PromoCode
  | Promotion
  | Order
  | User
  | Review
  | Product
  | Size
  | ProductType
  | Color
  | Category
  | BlockContent
  | Address
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: CATEGORY_BY_SLUG_QUERY
// Query: *[_type == "category" && slug.current == $slug && isActive == true][0] {    _id,    title,    "slug": slug.current,    pageType,    parent->{      _id,      title,      "slug": slug.current    },    enableSizeFilter,    enableColorFilter,    enablePriceFilter  }
export type CATEGORY_BY_SLUG_QUERYResult = {
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
  parent: {
    _id: string;
    title: string;
    slug: string;
  } | null;
  enableSizeFilter: boolean | null;
  enableColorFilter: boolean | null;
  enablePriceFilter: boolean | null;
} | null;
// Variable: CATEGORY_CHILDREN_QUERY
// Query: *[_type == "category" && parent._ref == $parentId && isActive == true] | order(title asc) {    _id,    title,    "slug": slug.current,    pageType  }
export type CATEGORY_CHILDREN_QUERYResult = Array<{
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
}>;
// Variable: NAVBAR_CATEGORIES_QUERY
// Query: *[_type == "category" && !defined(parent) && isActive == true] | order(_createdAt) {    _id,    title,    "slug": slug.current,    pageType,    "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {      _id,      title,      "slug": slug.current,      pageType,      "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {        _id,        title,        "slug": slug.current,        pageType      }    }  }
export type NAVBAR_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
  children: Array<{
    _id: string;
    title: string;
    slug: string;
    pageType: "landing" | "listing";
    children: Array<{
      _id: string;
      title: string;
      slug: string;
      pageType: "landing" | "listing";
    }>;
  }>;
}>;
// Variable: HAS_CHILDREN_QUERY
// Query: count(*[_type == "category" && parent._ref == $categoryId && isActive == true]) > 0
export type HAS_CHILDREN_QUERYResult = boolean;
// Variable: GET_CHILDREN_QUERY
// Query: *[_type == "category" && parent._ref == $categoryId && isActive == true] {    _id  }
export type GET_CHILDREN_QUERYResult = Array<{
  _id: string;
}>;
// Variable: PRODUCTS_BY_CATEGORYID_QUERY
// Query: *[_type == "product" && $categoryId in categoryHierarchy && isActive == true]   | order(_createdAt desc) {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "variants": variants[isActive == true && stockQuantity > 0] {      size,      stockQuantity,      color->{        _id,        name,        hexCode,        code      }    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PRODUCTS_BY_CATEGORYID_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  variants: Array<{
    size: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "size";
    };
    stockQuantity: number;
    color: {
      _id: string;
      name: string;
      hexCode: string;
      code: string;
    };
  }>;
  hasStock: boolean;
}>;
// Variable: PRODUCTS_COUNT_BY_CATEGORY_QUERY
// Query: count(*[_type == "product" && $categoryId in categoryHierarchy && isActive == true])
export type PRODUCTS_COUNT_BY_CATEGORY_QUERYResult = number;
// Variable: PAGINATED_PRODUCTS_BY_CATEGORYID_QUERY
// Query: *[_type == "product" && $categoryId in categoryHierarchy && isActive == true]   | order(_createdAt desc) [$startIndex...$endIndex] {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "variants": variants[isActive == true && stockQuantity > 0] {      size,      stockQuantity,      color->{        _id,        name,        hexCode,        code      }    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PAGINATED_PRODUCTS_BY_CATEGORYID_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  variants: Array<{
    size: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "size";
    };
    stockQuantity: number;
    color: {
      _id: string;
      name: string;
      hexCode: string;
      code: string;
    };
  }>;
  hasStock: boolean;
}>;
// Variable: PRODUCT_BY_ID_QUERY
// Query: *[_type == "product" && _id == $id && isActive == true][0] {    _id,    name,    "slug": slug.current,    description,    basePrice,    category->{      _id,      title,      "slug": slug.current,      parent->{        _id,        title,        "slug": slug.current      }    },    sizeGroup->{      _id,      name,      sizes    },    variants[] {      size->{        _id,        name,        code,        sortOrder      },      color->{        _id,        name,        code,        hexCode      },      sku,      stockQuantity,      isActive    },    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    images[] {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    keyFeatures,    materials,    sizeAndFit,    careInstructions,    relatedProducts[]->{      _id,      name,      "slug": slug.current,      basePrice,      thumbnail {        asset->{          _id,          url        },        alt      }    },    reviews[]->{      _id,      rating,      title,      comment,      isVerifiedPurchase,      createdAt,      user->{        firstName,        lastName      }    },    isFeatured  }
export type PRODUCT_BY_ID_QUERYResult = {
  _id: string;
  name: string;
  slug: string;
  description: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  basePrice: number;
  category: {
    _id: string;
    title: string;
    slug: string;
    parent: {
      _id: string;
      title: string;
      slug: string;
    } | null;
  };
  sizeGroup: null;
  variants: Array<{
    size: {
      _id: string;
      name: string;
      code: string;
      sortOrder: number;
    };
    color: {
      _id: string;
      name: string;
      code: string;
      hexCode: string;
    };
    sku: string;
    stockQuantity: number;
    isActive: boolean | null;
  }>;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  images: Array<{
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  }>;
  keyFeatures: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  materials: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  sizeAndFit: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  careInstructions: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  relatedProducts: Array<{
    _id: string;
    name: string;
    slug: string;
    basePrice: number;
    thumbnail: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string | null;
    };
  }> | null;
  reviews: null;
  isFeatured: boolean | null;
} | null;
// Variable: USER_BY_EMAIL_QUERY
// Query: *[_type == "user" && email == $email][0]{    firstName,    lastName,    email  }
export type USER_BY_EMAIL_QUERYResult = {
  firstName: string;
  lastName: string;
  email: string;
} | null;
// Variable: CATEGORY_FILTER_VALUES_QUERY
// Query: {    "colorValues": *[_type == "color" && _id in *[_type == "product" && $categoryId in categoryHierarchy && isActive == true]      .variants[isActive == true && stockQuantity > 0]      .color._ref]{_id, name, hexCode} | order(name asc)  }
export type CATEGORY_FILTER_VALUES_QUERYResult = {
  colorValues: Array<{
    _id: string;
    name: string;
    hexCode: string;
  }>;
};
// Variable: COLORS_BY_NAME
// Query: *[_type == "color" && string::lower(name) in $colorNames]{_id}
export type COLORS_BY_NAMEResult = Array<{
  _id: string;
}>;
// Variable: PRODUCTS_FILTERED_COUNT_BY_CATEGORY_QUERY
// Query: count(*[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0  ])
export type PRODUCTS_FILTERED_COUNT_BY_CATEGORY_QUERYResult = number;
// Variable: PRODUCTS_FILTERED_PAGINATED_BY_CATEGORY_QUERY
// Query: *[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0  ]  | order(_createdAt desc) [$startIndex...$endIndex] {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "variants": variants[isActive == true && stockQuantity > 0] {      size->{        _id,        name,        code      },      stockQuantity,      color->{        _id,        name,        hexCode,        code      }    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PRODUCTS_FILTERED_PAGINATED_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  variants: Array<{
    size: {
      _id: string;
      name: string;
      code: string;
    };
    stockQuantity: number;
    color: {
      _id: string;
      name: string;
      hexCode: string;
      code: string;
    };
  }>;
  hasStock: boolean;
}>;
// Variable: PAGINATED_FILTERED_PRODUCTS_BY_CATEGORYID_QUERY
// Query: *[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0  ]  | order(_createdAt desc) [$startIndex...$endIndex] {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "variants": variants[isActive == true && stockQuantity > 0] {      size->{        _id,        name,        code      },      stockQuantity,      color->{        _id,        name,        hexCode,        code      }    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PAGINATED_FILTERED_PRODUCTS_BY_CATEGORYID_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  variants: Array<{
    size: {
      _id: string;
      name: string;
      code: string;
    };
    stockQuantity: number;
    color: {
      _id: string;
      name: string;
      hexCode: string;
      code: string;
    };
  }>;
  hasStock: boolean;
}>;
// Variable: FILTERED_PRODUCTS_COUNT_BY_CATEGORYID_QUERY
// Query: count(*[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0  ])
export type FILTERED_PRODUCTS_COUNT_BY_CATEGORYID_QUERYResult = number;
// Variable: PRODUCTS_COUNT_BY_CATEGORYID_QUERY
// Query: count(*[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && count(variants[isActive == true && stockQuantity > 0]) > 0  ])
export type PRODUCTS_COUNT_BY_CATEGORYID_QUERYResult = number;
// Variable: GET_COLORS_FOR_CATEGORY_QUERY
// Query: *[_type == "color" && _id in *[    _type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && (!defined($minPrice) || basePrice >= $minPrice)    && (!defined($maxPrice) || basePrice <= $maxPrice)    && count(variants[      isActive == true      && stockQuantity > 0      && (!defined($sizeIds) || size._ref in $sizeIds)    ]) > 0  ].variants[isActive == true && stockQuantity > 0].color._ref]  {    _id,    name,    hexCode,    "productCount": count(*[      _type == "product"      && $categoryId in categoryHierarchy      && isActive == true      && (!defined($minPrice) || basePrice >= $minPrice)      && (!defined($maxPrice) || basePrice <= $maxPrice)      && ^._id in variants[        isActive == true        && stockQuantity > 0        && (!defined($sizeIds) || size._ref in $sizeIds)      ].color._ref    ])  } | order(name asc)
export type GET_COLORS_FOR_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string;
  hexCode: string;
  productCount: number;
}>;
// Variable: GET_SIZES_FOR_CATEGORY_QUERY
// Query: *[_type == "size" && _id in *[    _type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && (!defined($minPrice) || basePrice >= $minPrice)    && (!defined($maxPrice) || basePrice <= $maxPrice)    && count(variants[      isActive == true      && stockQuantity > 0      && (!defined($colorIds) || color._ref in $colorIds)    ]) > 0  ].variants[isActive == true && stockQuantity > 0].size._ref]  {    _id,    name,    code,    sortOrder,    "productCount": count(*[      _type == "product"      && $categoryId in categoryHierarchy      && isActive == true      && (!defined($minPrice) || basePrice >= $minPrice)      && (!defined($maxPrice) || basePrice <= $maxPrice)      && ^._id in variants[        isActive == true        && stockQuantity > 0        && (!defined($colorIds) || color._ref in $colorIds)      ].size._ref    ])  } | order(sortOrder asc)
export type GET_SIZES_FOR_CATEGORY_QUERYResult = Array<{
  _id: string;
  name: string;
  code: string;
  sortOrder: number;
  productCount: number;
}>;
// Variable: SIZES_BY_CODE
// Query: *[_type == "size" && string::lower(code) in $sizeCodes]{_id, name, code, sortOrder}
export type SIZES_BY_CODEResult = Array<{
  _id: string;
  name: string;
  code: string;
  sortOrder: number;
}>;
// Variable: GET_PRICE_RANGE_FOR_CATEGORY_QUERY
// Query: {    "minPrice": math::min(*[      _type == "product"      && $categoryId in categoryHierarchy      && isActive == true      && count(variants[        isActive == true        && stockQuantity > 0        && (!defined($colorIds) || length($colorIds) == 0 || color._ref in $colorIds)        && (!defined($sizeIds) || length($sizeIds) == 0 || size._ref in $sizeIds)      ]) > 0    ].basePrice),    "maxPrice": math::max(*[      _type == "product"      && $categoryId in categoryHierarchy      && isActive == true      && count(variants[        isActive == true        && stockQuantity > 0        && (!defined($colorIds) || length($colorIds) == 0 || color._ref in $colorIds)        && (!defined($sizeIds) || length($sizeIds) == 0 || size._ref in $sizeIds)      ]) > 0    ].basePrice)  }
export type GET_PRICE_RANGE_FOR_CATEGORY_QUERYResult = {
  minPrice: number;
  maxPrice: number;
};
// Variable: PRODUCTS_WITH_FILTERS_QUERY
// Query: *[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && (!defined($minPrice) || basePrice >= $minPrice)    && (!defined($maxPrice) || basePrice <= $maxPrice)    && count(variants[      isActive == true      && stockQuantity > 0      && (!defined($colorIds) || color._ref in $colorIds)      && (!defined($sizeIds) || size._ref in $sizeIds)    ]) > 0  ]  | order(      select(        $sortOrder == "price-asc" => 0 - basePrice,        $sortOrder == "price-desc" => basePrice,        0 - _createdAt      ) desc    ) [$startIndex...$endIndex] {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "variants": variants[isActive == true && stockQuantity > 0] {      size->{        _id,        name,        code      },      stockQuantity,      color->{        _id,        name,        hexCode,        code      }    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PRODUCTS_WITH_FILTERS_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  variants: Array<{
    size: {
      _id: string;
      name: string;
      code: string;
    };
    stockQuantity: number;
    color: {
      _id: string;
      name: string;
      hexCode: string;
      code: string;
    };
  }>;
  hasStock: boolean;
}>;
// Variable: PRODUCTS_COUNT_WITH_FILTERS_QUERY
// Query: count(*[_type == "product"    && $categoryId in categoryHierarchy    && isActive == true    && (!defined($minPrice) || basePrice >= $minPrice)    && (!defined($maxPrice) || basePrice <= $maxPrice)    && count(variants[      isActive == true      && stockQuantity > 0      && (!defined($colorIds) || color._ref in $colorIds)      && (!defined($sizeIds) || size._ref in $sizeIds)    ]) > 0  ])
export type PRODUCTS_COUNT_WITH_FILTERS_QUERYResult = number;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "category" && slug.current == $slug && isActive == true][0] {\n    _id,\n    title,\n    "slug": slug.current,\n    pageType,\n    parent->{\n      _id,\n      title,\n      "slug": slug.current\n    },\n    enableSizeFilter,\n    enableColorFilter,\n    enablePriceFilter\n  }\n': CATEGORY_BY_SLUG_QUERYResult;
    '\n  *[_type == "category" && parent._ref == $parentId && isActive == true] | order(title asc) {\n    _id,\n    title,\n    "slug": slug.current,\n    pageType\n  }\n': CATEGORY_CHILDREN_QUERYResult;
    '\n  *[_type == "category" && !defined(parent) && isActive == true] | order(_createdAt) {\n    _id,\n    title,\n    "slug": slug.current,\n    pageType,\n    "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {\n      _id,\n      title,\n      "slug": slug.current,\n      pageType,\n      "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {\n        _id,\n        title,\n        "slug": slug.current,\n        pageType\n      }\n    }\n  }\n': NAVBAR_CATEGORIES_QUERYResult;
    '\n  count(*[_type == "category" && parent._ref == $categoryId && isActive == true]) > 0\n': HAS_CHILDREN_QUERYResult;
    '\n  *[_type == "category" && parent._ref == $categoryId && isActive == true] {\n    _id\n  }\n': GET_CHILDREN_QUERYResult;
    '\n  *[_type == "product" && $categoryId in categoryHierarchy && isActive == true] \n  | order(_createdAt desc) {\n    _id,\n    name,\n    "slug": slug.current,\n    basePrice,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    "variants": variants[isActive == true && stockQuantity > 0] {\n      size,\n      stockQuantity,\n      color->{\n        _id,\n        name,\n        hexCode,\n        code\n      }\n    },\n    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0\n  }\n': PRODUCTS_BY_CATEGORYID_QUERYResult;
    '\n  count(*[_type == "product" && $categoryId in categoryHierarchy && isActive == true])\n': PRODUCTS_COUNT_BY_CATEGORY_QUERYResult;
    '\n  *[_type == "product" && $categoryId in categoryHierarchy && isActive == true] \n  | order(_createdAt desc) [$startIndex...$endIndex] {\n    _id,\n    name,\n    "slug": slug.current,\n    basePrice,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    "variants": variants[isActive == true && stockQuantity > 0] {\n      size,\n      stockQuantity,\n      color->{\n        _id,\n        name,\n        hexCode,\n        code\n      }\n    },\n    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0\n  }\n': PAGINATED_PRODUCTS_BY_CATEGORYID_QUERYResult;
    '\n  *[_type == "product" && _id == $id && isActive == true][0] {\n    _id,\n    name,\n    "slug": slug.current,\n    description,\n    basePrice,\n    category->{\n      _id,\n      title,\n      "slug": slug.current,\n      parent->{\n        _id,\n        title,\n        "slug": slug.current\n      }\n    },\n    sizeGroup->{\n      _id,\n      name,\n      sizes\n    },\n    variants[] {\n      size->{\n        _id,\n        name,\n        code,\n        sortOrder\n      },\n      color->{\n        _id,\n        name,\n        code,\n        hexCode\n      },\n      sku,\n      stockQuantity,\n      isActive\n    },\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    images[] {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    keyFeatures,\n    materials,\n    sizeAndFit,\n    careInstructions,\n    relatedProducts[]->{\n      _id,\n      name,\n      "slug": slug.current,\n      basePrice,\n      thumbnail {\n        asset->{\n          _id,\n          url\n        },\n        alt\n      }\n    },\n    reviews[]->{\n      _id,\n      rating,\n      title,\n      comment,\n      isVerifiedPurchase,\n      createdAt,\n      user->{\n        firstName,\n        lastName\n      }\n    },\n    isFeatured\n  }\n': PRODUCT_BY_ID_QUERYResult;
    '\n  *[_type == "user" && email == $email][0]{\n    firstName,\n    lastName,\n    email\n  }\n': USER_BY_EMAIL_QUERYResult;
    '\n  {\n    "colorValues": *[_type == "color" && _id in *[_type == "product" && $categoryId in categoryHierarchy && isActive == true]\n      .variants[isActive == true && stockQuantity > 0]\n      .color._ref]{_id, name, hexCode} | order(name asc)\n  }\n': CATEGORY_FILTER_VALUES_QUERYResult;
    '\n  *[_type == "color" && string::lower(name) in $colorNames]{_id}\n  ': COLORS_BY_NAMEResult;
    '\n  count(*[_type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0\n  ])\n':
      | PRODUCTS_FILTERED_COUNT_BY_CATEGORY_QUERYResult
      | FILTERED_PRODUCTS_COUNT_BY_CATEGORYID_QUERYResult;
    '\n  *[_type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && count(variants[isActive == true && stockQuantity > 0 && color._ref in $colorIds]) > 0\n  ]\n  | order(_createdAt desc) [$startIndex...$endIndex] {\n    _id,\n    name,\n    "slug": slug.current,\n    basePrice,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    "variants": variants[isActive == true && stockQuantity > 0] {\n      size->{\n        _id,\n        name,\n        code\n      },\n      stockQuantity,\n      color->{\n        _id,\n        name,\n        hexCode,\n        code\n      }\n    },\n    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0\n  }\n':
      | PRODUCTS_FILTERED_PAGINATED_BY_CATEGORY_QUERYResult
      | PAGINATED_FILTERED_PRODUCTS_BY_CATEGORYID_QUERYResult;
    '\n  count(*[_type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && count(variants[isActive == true && stockQuantity > 0]) > 0\n  ])\n': PRODUCTS_COUNT_BY_CATEGORYID_QUERYResult;
    '\n  *[_type == "color" && _id in *[\n    _type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && (!defined($minPrice) || basePrice >= $minPrice)\n    && (!defined($maxPrice) || basePrice <= $maxPrice)\n    && count(variants[\n      isActive == true\n      && stockQuantity > 0\n      && (!defined($sizeIds) || size._ref in $sizeIds)\n    ]) > 0\n  ].variants[isActive == true && stockQuantity > 0].color._ref]\n  {\n    _id,\n    name,\n    hexCode,\n    "productCount": count(*[\n      _type == "product"\n      && $categoryId in categoryHierarchy\n      && isActive == true\n      && (!defined($minPrice) || basePrice >= $minPrice)\n      && (!defined($maxPrice) || basePrice <= $maxPrice)\n      && ^._id in variants[\n        isActive == true\n        && stockQuantity > 0\n        && (!defined($sizeIds) || size._ref in $sizeIds)\n      ].color._ref\n    ])\n  } | order(name asc)\n': GET_COLORS_FOR_CATEGORY_QUERYResult;
    '\n  *[_type == "size" && _id in *[\n    _type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && (!defined($minPrice) || basePrice >= $minPrice)\n    && (!defined($maxPrice) || basePrice <= $maxPrice)\n    && count(variants[\n      isActive == true\n      && stockQuantity > 0\n      && (!defined($colorIds) || color._ref in $colorIds)\n    ]) > 0\n  ].variants[isActive == true && stockQuantity > 0].size._ref]\n  {\n    _id,\n    name,\n    code,\n    sortOrder,\n    "productCount": count(*[\n      _type == "product"\n      && $categoryId in categoryHierarchy\n      && isActive == true\n      && (!defined($minPrice) || basePrice >= $minPrice)\n      && (!defined($maxPrice) || basePrice <= $maxPrice)\n      && ^._id in variants[\n        isActive == true\n        && stockQuantity > 0\n        && (!defined($colorIds) || color._ref in $colorIds)\n      ].size._ref\n    ])\n  } | order(sortOrder asc)\n': GET_SIZES_FOR_CATEGORY_QUERYResult;
    '\n  *[_type == "size" && string::lower(code) in $sizeCodes]{_id, name, code, sortOrder}\n': SIZES_BY_CODEResult;
    '\n  {\n    "minPrice": math::min(*[\n      _type == "product"\n      && $categoryId in categoryHierarchy\n      && isActive == true\n      && count(variants[\n        isActive == true\n        && stockQuantity > 0\n        && (!defined($colorIds) || length($colorIds) == 0 || color._ref in $colorIds)\n        && (!defined($sizeIds) || length($sizeIds) == 0 || size._ref in $sizeIds)\n      ]) > 0\n    ].basePrice),\n    "maxPrice": math::max(*[\n      _type == "product"\n      && $categoryId in categoryHierarchy\n      && isActive == true\n      && count(variants[\n        isActive == true\n        && stockQuantity > 0\n        && (!defined($colorIds) || length($colorIds) == 0 || color._ref in $colorIds)\n        && (!defined($sizeIds) || length($sizeIds) == 0 || size._ref in $sizeIds)\n      ]) > 0\n    ].basePrice)\n  }\n': GET_PRICE_RANGE_FOR_CATEGORY_QUERYResult;
    '\n  *[_type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && (!defined($minPrice) || basePrice >= $minPrice)\n    && (!defined($maxPrice) || basePrice <= $maxPrice)\n    && count(variants[\n      isActive == true\n      && stockQuantity > 0\n      && (!defined($colorIds) || color._ref in $colorIds)\n      && (!defined($sizeIds) || size._ref in $sizeIds)\n    ]) > 0\n  ]\n  | order(\n      select(\n        $sortOrder == "price-asc" => 0 - basePrice,\n        $sortOrder == "price-desc" => basePrice,\n        0 - _createdAt\n      ) desc\n    ) [$startIndex...$endIndex] {\n    _id,\n    name,\n    "slug": slug.current,\n    basePrice,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    "variants": variants[isActive == true && stockQuantity > 0] {\n      size->{\n        _id,\n        name,\n        code\n      },\n      stockQuantity,\n      color->{\n        _id,\n        name,\n        hexCode,\n        code\n      }\n    },\n    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0\n  }\n': PRODUCTS_WITH_FILTERS_QUERYResult;
    '\n  count(*[_type == "product"\n    && $categoryId in categoryHierarchy\n    && isActive == true\n    && (!defined($minPrice) || basePrice >= $minPrice)\n    && (!defined($maxPrice) || basePrice <= $maxPrice)\n    && count(variants[\n      isActive == true\n      && stockQuantity > 0\n      && (!defined($colorIds) || color._ref in $colorIds)\n      && (!defined($sizeIds) || size._ref in $sizeIds)\n    ]) > 0\n  ])\n': PRODUCTS_COUNT_WITH_FILTERS_QUERYResult;
  }
}

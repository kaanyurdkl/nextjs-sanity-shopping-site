/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type PromoCode = {
  _id: string;
  _type: "promoCode";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description?: string;
  code: string;
  discountType: "fixed_amount" | "percentage";
  discountValue: number;
  hasMaximumDiscount?: boolean;
  maximumDiscount?: number;
  hasMinimumPurchase?: boolean;
  minimumPurchase?: number;
  hasUsageLimit?: boolean;
  usageLimit?: number;
  isActive?: boolean;
  startDate: string;
  endDate?: string;
  usageCount?: number;
};

export type Promotion = {
  _id: string;
  _type: "promotion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  description: string;
  type: "percentage" | "fixed_amount" | "bundle" | "bogo" | "tiered" | "threshold";
  percentageConfig?: {
    discountPercentage?: number;
    minimumQuantity?: number;
    maximumDiscount?: number;
  };
  fixedAmountConfig?: {
    discountAmount?: number;
    minimumPurchase?: number;
  };
  bundleConfig?: {
    quantity?: number;
    bundlePrice?: number;
  };
  bogoConfig?: {
    buyQuantity?: number;
    getQuantity?: number;
    discountType?: "free" | "percentage";
    discountPercentage?: number;
  };
  tieredConfig?: {
    tiers?: Array<{
      minimumQuantity?: number;
      discountPercentage?: number;
      _key: string;
    }>;
  };
  thresholdConfig?: {
    minimumSpend?: number;
    discountType?: "percentage" | "fixed_amount";
    discountValue?: number;
  };
  applicableCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  applicableProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
  showTag?: boolean;
  tagLabel: string;
  tagBackgroundColor: string;
  tagTextColor: string;
  priority: number;
  isActive?: boolean;
  startDate: string;
  endDate?: string;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber: string;
  status: "confirmation" | "processing" | "shipped" | "in_transit" | "out_for_delivery" | "delivered" | "delayed" | "cancelled" | "refunded";
  userId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  guestEmail?: string;
  items: Array<{
    product: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    variant?: {
      size: string;
      color: string;
      sku: string;
    };
    quantity: number;
    basePrice: number;
    finalPrice: number;
    appliedPromotions?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "promotion";
    }>;
    _type: "orderItem";
    _key: string;
  }>;
  subtotal: number;
  totalDiscount?: number;
  promoCodeDiscount?: number;
  promoCode?: string;
  shippingCost: number;
  taxAmount: number;
  taxRate?: number;
  grandTotal: number;
  shippingAddress: Address;
  billingAddress?: {
    sameAsShipping?: boolean;
    address?: Address;
  };
  paymentMethod: {
    type: "credit_card" | "paypal";
    stripePaymentIntentId?: string;
    lastFourDigits?: string;
    brand?: string;
  };
  shippingMethod: "standard" | "express";
  trackingNumber?: string;
  carrier?: string;
  estimatedDelivery?: string;
  orderNotes?: string;
  statusHistory?: Array<{
    status: string;
    timestamp: string;
    note?: string;
    _key: string;
  }>;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  addresses?: Array<{
    _key: string;
  } & Address>;
  isActive?: boolean;
  orderEmails?: boolean;
  googleId: string;
};

export type Review = {
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  reviewerName: string;
  rating: number;
  comment: string;
  isVerifiedPurchase?: boolean;
  isApproved?: boolean;
  helpfulCount?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  thumbnail: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  hoverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  basePrice: number;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  categoryHierarchy?: Array<string>;
  sizeGroup: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "size";
  };
  variants?: Array<{
    size: string;
    color: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "color";
    };
    sku: string;
    stockQuantity: number;
    isActive?: boolean;
    _type: "variant";
    _key: string;
  }>;
  isActive?: boolean;
  isFeatured?: boolean;
  seoTitle?: string;
  seoDescription?: string;
  keyFeatures?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  materials?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  sizeAndFit?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  careInstructions?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  relatedProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
};

export type Size = {
  _id: string;
  _type: "size";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  sizes: Array<{
    name: string;
    code: string;
    _type: "sizeItem";
    _key: string;
  }>;
};

export type Color = {
  _id: string;
  _type: "color";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  code: string;
  hexCode: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  description?: string;
  pageType: "listing" | "landing";
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  seoTitle?: string;
  seoDescription?: string;
  isActive?: boolean;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Address = {
  _type: "address";
  nickname: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  streetAddress: string;
  aptUnit?: string;
  city: string;
  province: "AB" | "BC" | "MB" | "NB" | "NL" | "NT" | "NS" | "NU" | "ON" | "PE" | "QC" | "SK" | "YT";
  postalCode: string;
  country?: string;
  isDefault?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = PromoCode | Promotion | Order | User | Review | Product | Size | Color | Category | BlockContent | Address | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: CATEGORY_BY_SLUG_QUERY
// Query: *[_type == "category" && slug.current == $slug && isActive == true][0] {    _id,    title,    "slug": slug.current,    pageType,    parent->{      _id,      title,      "slug": slug.current    }  }
export type CATEGORY_BY_SLUG_QUERYResult = {
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
  parent: {
    _id: string;
    title: string;
    slug: string;
  } | null;
} | null;
// Variable: CATEGORY_CHILDREN_QUERY
// Query: *[_type == "category" && parent._ref == $parentId && isActive == true] | order(title asc) {    _id,    title,    "slug": slug.current,    pageType  }
export type CATEGORY_CHILDREN_QUERYResult = Array<{
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
}>;
// Variable: NAVBAR_CATEGORIES_QUERY
// Query: *[_type == "category" && !defined(parent) && isActive == true] | order(_createdAt) {    _id,    title,    "slug": slug.current,    pageType,    "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {      _id,      title,      "slug": slug.current,      pageType,      "children": *[_type == "category" && parent._ref == ^._id && isActive == true] | order(_createdAt) {        _id,        title,        "slug": slug.current,        pageType      }    }  }
export type NAVBAR_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string;
  slug: string;
  pageType: "landing" | "listing";
  children: Array<{
    _id: string;
    title: string;
    slug: string;
    pageType: "landing" | "listing";
    children: Array<{
      _id: string;
      title: string;
      slug: string;
      pageType: "landing" | "listing";
    }>;
  }>;
}>;
// Variable: HAS_CHILDREN_QUERY
// Query: count(*[_type == "category" && parent._ref == $categoryId && isActive == true]) > 0
export type HAS_CHILDREN_QUERYResult = boolean;
// Variable: GET_CHILDREN_QUERY
// Query: *[_type == "category" && parent._ref == $categoryId && isActive == true] {    _id  }
export type GET_CHILDREN_QUERYResult = Array<{
  _id: string;
}>;
// Variable: PRODUCTS_BY_CATEGORY_HIERARCHY_QUERY
// Query: *[_type == "product" && $categoryId in categoryHierarchy && isActive == true]   | order(_createdAt desc) {    _id,    name,    "slug": slug.current,    basePrice,    thumbnail {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    hoverImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },      alt    },    "availableColors": variants[isActive == true && stockQuantity > 0].color->{      _id,      name,      hexCode,      code    },    "hasStock": count(variants[isActive == true && stockQuantity > 0]) > 0  }
export type PRODUCTS_BY_CATEGORY_HIERARCHY_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
  basePrice: number;
  thumbnail: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  };
  hoverImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  availableColors: Array<{
    _id: string;
    name: string;
    hexCode: string;
    code: string;
  }> | null;
  hasStock: boolean | null;
}>;
// Variable: USER_BY_EMAIL_QUERY
// Query: *[_type == "user" && email == $email][0]{    firstName,    lastName,    email  }
export type USER_BY_EMAIL_QUERYResult = {
  firstName: string;
  lastName: string;
  email: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"category\" && slug.current == $slug && isActive == true][0] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    pageType,\n    parent->{\n      _id,\n      title,\n      \"slug\": slug.current\n    }\n  }\n": CATEGORY_BY_SLUG_QUERYResult;
    "\n  *[_type == \"category\" && parent._ref == $parentId && isActive == true] | order(title asc) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    pageType\n  }\n": CATEGORY_CHILDREN_QUERYResult;
    "\n  *[_type == \"category\" && !defined(parent) && isActive == true] | order(_createdAt) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    pageType,\n    \"children\": *[_type == \"category\" && parent._ref == ^._id && isActive == true] | order(_createdAt) {\n      _id,\n      title,\n      \"slug\": slug.current,\n      pageType,\n      \"children\": *[_type == \"category\" && parent._ref == ^._id && isActive == true] | order(_createdAt) {\n        _id,\n        title,\n        \"slug\": slug.current,\n        pageType\n      }\n    }\n  }\n": NAVBAR_CATEGORIES_QUERYResult;
    "\n  count(*[_type == \"category\" && parent._ref == $categoryId && isActive == true]) > 0\n": HAS_CHILDREN_QUERYResult;
    "\n  *[_type == \"category\" && parent._ref == $categoryId && isActive == true] {\n    _id\n  }\n": GET_CHILDREN_QUERYResult;
    "\n  *[_type == \"product\" && $categoryId in categoryHierarchy && isActive == true] \n  | order(_createdAt desc) {\n    _id,\n    name,\n    \"slug\": slug.current,\n    basePrice,\n    thumbnail {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    hoverImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    \"availableColors\": variants[isActive == true && stockQuantity > 0].color->{\n      _id,\n      name,\n      hexCode,\n      code\n    },\n    \"hasStock\": count(variants[isActive == true && stockQuantity > 0]) > 0\n  }\n": PRODUCTS_BY_CATEGORY_HIERARCHY_QUERYResult;
    "\n  *[_type == \"user\" && email == $email][0]{\n    firstName,\n    lastName,\n    email\n  }\n": USER_BY_EMAIL_QUERYResult;
  }
}
